// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gsubC
std::string gsubC(const std::string& pattern, const std::string& replacement, std::string x);
RcppExport SEXP _leafpop_gsubC(SEXP patternSEXP, SEXP replacementSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(gsubC(pattern, replacement, x));
    return rcpp_result_gen;
END_RCPP
}
// brewPopupRowC
std::string brewPopupRowC(std::string index, std::string colname, std::string value, bool rowIndex);
RcppExport SEXP _leafpop_brewPopupRowC(SEXP indexSEXP, SEXP colnameSEXP, SEXP valueSEXP, SEXP rowIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::string >::type colname(colnameSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    Rcpp::traits::input_parameter< bool >::type rowIndex(rowIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(brewPopupRowC(index, colname, value, rowIndex));
    return rcpp_result_gen;
END_RCPP
}
// brewPopupRowAltC
std::string brewPopupRowAltC(std::string index, std::string colname, std::string value, bool rowIndex);
RcppExport SEXP _leafpop_brewPopupRowAltC(SEXP indexSEXP, SEXP colnameSEXP, SEXP valueSEXP, SEXP rowIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::string >::type colname(colnameSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    Rcpp::traits::input_parameter< bool >::type rowIndex(rowIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(brewPopupRowAltC(index, colname, value, rowIndex));
    return rcpp_result_gen;
END_RCPP
}
// brewPopupCoords
std::string brewPopupCoords(std::string colname, std::string value);
RcppExport SEXP _leafpop_brewPopupCoords(SEXP colnameSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type colname(colnameSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(brewPopupCoords(colname, value));
    return rcpp_result_gen;
END_RCPP
}
// mergePopupRows
std::string mergePopupRows(CharacterVector names, CharacterVector values, bool rowIndex);
RcppExport SEXP _leafpop_mergePopupRows(SEXP namesSEXP, SEXP valuesSEXP, SEXP rowIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type rowIndex(rowIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(mergePopupRows(names, values, rowIndex));
    return rcpp_result_gen;
END_RCPP
}
// createTemplate
std::string createTemplate(std::string tmpPath);
RcppExport SEXP _leafpop_createTemplate(SEXP tmpPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type tmpPath(tmpPathSEXP);
    rcpp_result_gen = Rcpp::wrap(createTemplate(tmpPath));
    return rcpp_result_gen;
END_RCPP
}
// listPopupTemplates
StringVector listPopupTemplates(CharacterMatrix x, CharacterVector names, std::string tmpPath, bool rowIndex);
RcppExport SEXP _leafpop_listPopupTemplates(SEXP xSEXP, SEXP namesSEXP, SEXP tmpPathSEXP, SEXP rowIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< std::string >::type tmpPath(tmpPathSEXP);
    Rcpp::traits::input_parameter< bool >::type rowIndex(rowIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(listPopupTemplates(x, names, tmpPath, rowIndex));
    return rcpp_result_gen;
END_RCPP
}
// df2String
CharacterMatrix df2String(DataFrame x);
RcppExport SEXP _leafpop_df2String(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(df2String(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_leafpop_gsubC", (DL_FUNC) &_leafpop_gsubC, 3},
    {"_leafpop_brewPopupRowC", (DL_FUNC) &_leafpop_brewPopupRowC, 4},
    {"_leafpop_brewPopupRowAltC", (DL_FUNC) &_leafpop_brewPopupRowAltC, 4},
    {"_leafpop_brewPopupCoords", (DL_FUNC) &_leafpop_brewPopupCoords, 2},
    {"_leafpop_mergePopupRows", (DL_FUNC) &_leafpop_mergePopupRows, 3},
    {"_leafpop_createTemplate", (DL_FUNC) &_leafpop_createTemplate, 1},
    {"_leafpop_listPopupTemplates", (DL_FUNC) &_leafpop_listPopupTemplates, 4},
    {"_leafpop_df2String", (DL_FUNC) &_leafpop_df2String, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_leafpop(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
